/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute } from 'workbox-precaching';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const CACHE_STATIC = 'cache-static-v1';
const CACHE_DYNAMIC = 'cache-dynamic-v1'; //aca poner la imagen de la ruta externa
const CACHE_INMUTABLE = 'cache-inmutable-v1';

const APP_SHELL = [
  '/favicon.ico', 
  '/', 
  '/index.html'
]; //aca puede ir alguna imagen de static, del build, todos los logos

const APP_SHELL_INMUTABLE = []; //aca pueden ir las fuentes del css

self.addEventListener('install', e => {
  const promiseStatic = caches.open(CACHE_STATIC).then(cache => cache.addAll(APP_SHELL));
  const promiseInmutable = caches.open(CACHE_INMUTABLE).then(cache => cache.addAll(APP_SHELL_INMUTABLE));
  e.waitUntil(Promise.all([promiseStatic, promiseInmutable]));
});

self.addEventListener('activate', e => {
  const response = caches.keys().then(keys => {
    keys.forEach(key => {
      if (key !== CACHE_STATIC && key.includes('static')) {
        return caches.delete(key);
      }
      if (key !== CACHE_DYNAMIC && key.includes('dynamic')) {
        return caches.delete(key);
      }
    });
  });
  e.waitUntil(response);
});
